{
  "version": 3,
  "sources": ["../src/bin/nodecg.ts", "../src/index.ts", "../package.json", "../src/commands/defaultconfig.ts", "../src/lib/util.ts", "../src/commands/install.ts", "../src/lib/fetch-tags.ts", "../src/lib/install-bundle-deps.ts", "../src/commands/schema-types.ts", "../src/commands/setup.ts", "../src/lib/list-npm-versions.ts", "../src/commands/start.ts", "../src/commands/uninstall.ts", "../src/commands/index.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n\nimport chalk from \"chalk\";\nimport spawn from \"nano-spawn\";\n\nimport { setupCLI } from \"..\";\n\ntry {\n\tawait spawn(\"git\", [\"--version\"]);\n} catch (error) {\n\tconsole.error(\n\t\t`The CLI requires that ${chalk.cyan(\"git\")} be available in your PATH.`,\n\t);\n\tprocess.exit(1);\n}\n\nsetupCLI();\n", "import { Command } from \"commander\";\n\nimport packageJson from \"../package.json\" with { type: \"json\" };\nimport { setupCommands } from \"./commands/index.js\";\n\nexport function setupCLI() {\n\tprocess.title = \"nodecg\";\n\n\tconst program = new Command(\"nodecg\");\n\n\t// Initialise CLI\n\tprogram.version(packageJson.version).usage(\"<command> [options]\");\n\n\t// Initialise commands\n\tsetupCommands(program);\n\n\t// Handle unknown commands\n\tprogram.on(\"*\", () => {\n\t\tconsole.log(\"Unknown command:\", program.args.join(\" \"));\n\t\tprogram.help();\n\t});\n\n\t// Print help if no commands were given\n\tif (!process.argv.slice(2).length) {\n\t\tprogram.help();\n\t}\n\n\t// Process commands\n\tprogram.parse(process.argv);\n}\n", "{\n  \"name\": \"@nodecg/cli\",\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"main\": \"dist/main.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"run-s build:*\",\n    \"build:tsc\": \"tsc -b\",\n    \"build:esbuild\": \"del-cli dist && esbuild src/bin/nodecg.ts --bundle --format=esm --sourcemap --platform=node --target=node18 --outfile=dist/main.js --packages=external\",\n    \"dev\": \"run-p dev:*\",\n    \"dev:tsc\": \"tsc -b --watch --preserveWatchOutput\",\n    \"dev:esbuild\": \"del-cli dist && npm run build:esbuild -- --watch\"\n  },\n  \"dependencies\": {\n    \"@inquirer/prompts\": \"^7.2.1\",\n    \"ajv\": \"^8.17.1\",\n    \"chalk\": \"^5.4.1\",\n    \"commander\": \"^13.0.0\",\n    \"hosted-git-info\": \"^8.0.2\",\n    \"json-schema-to-typescript\": \"^15.0.3\",\n    \"nano-spawn\": \"^0.2.0\",\n    \"npm-package-arg\": \"^12.0.1\",\n    \"semver\": \"^7.6.3\",\n    \"tar\": \"^7.4.3\"\n  },\n  \"devDependencies\": {\n    \"@types/hosted-git-info\": \"^3.0.5\",\n    \"@types/node\": \"20\",\n    \"@types/npm-package-arg\": \"^6.1.4\",\n    \"@types/semver\": \"^7.5.8\",\n    \"del-cli\": \"^6.0.0\",\n    \"esbuild\": \"^0.24.2\",\n    \"type-fest\": \"^4.33.0\",\n    \"typescript\": \"~5.7.3\",\n    \"npm-run-all2\": \"^7.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n", "import fs from \"node:fs\";\nimport path from \"node:path\";\n\nimport { Ajv, type JSONSchemaType } from \"ajv\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\n\nimport { getNodeCGPath, isBundleFolder } from \"../lib/util.js\";\n\nconst ajv = new Ajv({ useDefaults: true, strict: true });\n\nexport function defaultconfigCommand(program: Command) {\n\tprogram\n\t\t.command(\"defaultconfig [bundle]\")\n\t\t.description(\"Generate default config from configschema.json\")\n\t\t.action(action);\n}\n\nfunction action(bundleName?: string) {\n\tconst cwd = process.cwd();\n\tconst nodecgPath = getNodeCGPath();\n\n\tif (!bundleName) {\n\t\tif (isBundleFolder(cwd)) {\n\t\t\tbundleName = bundleName ?? path.basename(cwd);\n\t\t} else {\n\t\t\tconsole.error(\n\t\t\t\t`${chalk.red(\"Error:\")} No bundle found in the current directory!`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tconst bundlePath = path.join(nodecgPath, \"bundles/\", bundleName);\n\tconst schemaPath = path.join(\n\t\tnodecgPath,\n\t\t\"bundles/\",\n\t\tbundleName,\n\t\t\"/configschema.json\",\n\t);\n\tconst cfgPath = path.join(nodecgPath, \"cfg/\");\n\n\tif (!fs.existsSync(bundlePath)) {\n\t\tconsole.error(`${chalk.red(\"Error:\")} Bundle ${bundleName} does not exist`);\n\t\treturn;\n\t}\n\n\tif (!fs.existsSync(schemaPath)) {\n\t\tconsole.error(\n\t\t\t`${chalk.red(\"Error:\")} Bundle ${bundleName} does not have a configschema.json`,\n\t\t);\n\t\treturn;\n\t}\n\n\tif (!fs.existsSync(cfgPath)) {\n\t\tfs.mkdirSync(cfgPath);\n\t}\n\n\tconst schema: JSONSchemaType<unknown> = JSON.parse(\n\t\tfs.readFileSync(schemaPath, \"utf8\"),\n\t);\n\tconst configPath = path.join(nodecgPath, \"cfg/\", `${bundleName}.json`);\n\tif (fs.existsSync(configPath)) {\n\t\tconsole.error(\n\t\t\t`${chalk.red(\"Error:\")} Bundle ${bundleName} already has a config file`,\n\t\t);\n\t} else {\n\t\ttry {\n\t\t\tconst validate = ajv.compile(schema);\n\t\t\tconst data = {};\n\t\t\tvalidate(data);\n\n\t\t\tfs.writeFileSync(configPath, JSON.stringify(data, null, 2));\n\t\t\tconsole.log(\n\t\t\t\t`${chalk.green(\"Success:\")} Created ${chalk.bold(bundleName)}'s default config from schema\\n`,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconsole.error(chalk.red(\"Error:\"), error);\n\t\t}\n\t}\n}\n", "import fs from \"node:fs\";\nimport path from \"node:path\";\n\n/**\n * Checks if the given directory contains a NodeCG installation.\n * @param pathToCheck\n */\nexport function pathContainsNodeCG(pathToCheck: string): boolean {\n\tconst pjsonPath = path.join(pathToCheck, \"package.json\");\n\ttry {\n\t\tconst pjson = JSON.parse(fs.readFileSync(pjsonPath, \"utf-8\"));\n\t\treturn pjson.name.toLowerCase() === \"nodecg\";\n\t} catch {\n\t\treturn false;\n\t}\n}\n\n/**\n * Gets the nearest NodeCG installation folder. First looks in process.cwd(), then looks\n * in every parent folder until reaching the root. Throws an error if no NodeCG installation\n * could be found.\n */\nexport function getNodeCGPath() {\n\tlet curr = process.cwd();\n\tdo {\n\t\tif (pathContainsNodeCG(curr)) {\n\t\t\treturn curr;\n\t\t}\n\n\t\tconst nextCurr = path.resolve(curr, \"..\");\n\t\tif (nextCurr === curr) {\n\t\t\tthrow new Error(\n\t\t\t\t\"NodeCG installation could not be found in this directory or any parent directory.\",\n\t\t\t);\n\t\t}\n\n\t\tcurr = nextCurr;\n\t} while (fs.lstatSync(curr).isDirectory());\n\n\tthrow new Error(\n\t\t\"NodeCG installation could not be found in this directory or any parent directory.\",\n\t);\n}\n\n/**\n * Checks if the given directory is a NodeCG bundle.\n */\nexport function isBundleFolder(pathToCheck: string) {\n\tconst pjsonPath = path.join(pathToCheck, \"package.json\");\n\tif (fs.existsSync(pjsonPath)) {\n\t\tconst pjson = JSON.parse(fs.readFileSync(pjsonPath, \"utf8\"));\n\t\treturn typeof pjson.nodecg === \"object\";\n\t}\n\n\treturn false;\n}\n\n/**\n * Gets the currently-installed NodeCG version string, in the format \"vX.Y.Z\"\n */\nexport function getCurrentNodeCGVersion(): string {\n\tconst nodecgPath = getNodeCGPath();\n\treturn JSON.parse(fs.readFileSync(`${nodecgPath}/package.json`, \"utf8\"))\n\t\t.version;\n}\n", "import fs from \"node:fs\";\nimport os from \"node:os\";\nimport path from \"node:path\";\n\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport HostedGitInfo from \"hosted-git-info\";\nimport spawn from \"nano-spawn\";\nimport npa from \"npm-package-arg\";\nimport semver, { SemVer } from \"semver\";\n\nimport { fetchTags } from \"../lib/fetch-tags.js\";\nimport { installBundleDeps } from \"../lib/install-bundle-deps.js\";\nimport { getNodeCGPath } from \"../lib/util.js\";\n\nexport function installCommand(program: Command) {\n\tprogram\n\t\t.command(\"install [repo]\")\n\t\t.description(\n\t\t\t\"Install a bundle by cloning a git repo. Can be a GitHub owner/repo pair or a git url.\" +\n\t\t\t\t\"\\n\\t\\t    If run in a bundle directory with no arguments, installs that bundle's dependencies.\",\n\t\t)\n\t\t.option(\"-d, --dev\", \"install development npm dependencies\")\n\t\t.action(action);\n}\n\nasync function action(repo: string, options: { dev: boolean }) {\n\tconst dev = options.dev || false;\n\n\t// If no args are supplied, assume the user is intending to operate on the bundle in the current dir\n\tif (!repo) {\n\t\tawait installBundleDeps(process.cwd(), dev);\n\t\treturn;\n\t}\n\n\tlet range = \"\";\n\tif (repo.indexOf(\"#\") > 0) {\n\t\tconst repoParts = repo.split(\"#\");\n\t\trange = repoParts[1] ?? \"\";\n\t\trepo = repoParts[0] ?? \"\";\n\t}\n\n\tconst nodecgPath = getNodeCGPath();\n\tconst parsed = npa(repo);\n\tif (!parsed.hosted) {\n\t\tconsole.error(\n\t\t\t\"Please enter a valid git repository URL or GitHub username/repo pair.\",\n\t\t);\n\t\treturn;\n\t}\n\n\tconst hostedInfo = parsed.hosted as unknown as HostedGitInfo;\n\tconst repoUrl = hostedInfo.https();\n\tif (!repoUrl) {\n\t\tconsole.error(\n\t\t\t\"Please enter a valid git repository URL or GitHub username/repo pair.\",\n\t\t);\n\t\treturn;\n\t}\n\n\t// Check that `bundles` exists\n\tconst bundlesPath = path.join(nodecgPath, \"bundles\");\n\t/* istanbul ignore next: Simple directory creation, not necessary to test */\n\tif (!fs.existsSync(bundlesPath)) {\n\t\tfs.mkdirSync(bundlesPath);\n\t}\n\n\t// Extract repo name from git url\n\tconst temp = repoUrl.split(\"/\").pop() ?? \"\";\n\tconst bundleName = temp.slice(0, temp.length - 4);\n\tconst bundlePath = path.join(nodecgPath, \"bundles/\", bundleName);\n\n\t// Figure out what version to checkout\n\tprocess.stdout.write(`Fetching ${bundleName} release list... `);\n\tlet tags;\n\tlet target;\n\ttry {\n\t\ttags = await fetchTags(repoUrl);\n\t\ttarget = semver.maxSatisfying(\n\t\t\ttags\n\t\t\t\t.map((tag) => semver.coerce(tag))\n\t\t\t\t.filter((coercedTag): coercedTag is SemVer => Boolean(coercedTag)),\n\t\t\trange,\n\t\t);\n\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t} catch (e: any) {\n\t\t/* istanbul ignore next */\n\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t/* istanbul ignore next */\n\t\tconsole.error(e.stack);\n\t\t/* istanbul ignore next */\n\t\treturn;\n\t}\n\n\t// Clone from github\n\tprocess.stdout.write(`Installing ${bundleName}... `);\n\ttry {\n\t\tawait spawn(\"git\", [\"clone\", repoUrl, bundlePath]);\n\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t} catch (e: any) {\n\t\t/* istanbul ignore next */\n\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t/* istanbul ignore next */\n\t\tconsole.error(e.stack);\n\t\t/* istanbul ignore next */\n\t\treturn;\n\t}\n\n\t// If a bundle has no git tags, target will be null.\n\tif (target) {\n\t\tprocess.stdout.write(`Checking out version ${target.version}... `);\n\t\ttry {\n\t\t\t// First try the target as-is.\n\t\t\tawait spawn(\"git\", [\"checkout\", target.version], { cwd: bundlePath });\n\t\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t\t} catch (_) {\n\t\t\ttry {\n\t\t\t\t// Next try prepending `v` to the target, which may have been stripped by `semver.coerce`.\n\t\t\t\tawait spawn(\"git\", [\"checkout\", `v${target.version}`], {\n\t\t\t\t\tcwd: bundlePath,\n\t\t\t\t});\n\t\t\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t\t\t} catch (e: any) {\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tconsole.error(e.stack);\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t// After installing the bundle, install its npm dependencies\n\tawait installBundleDeps(bundlePath, dev);\n}\n", "import spawn from \"nano-spawn\";\n\nexport async function fetchTags(repoUrl: string) {\n\tconst { stdout } = await spawn(\"git\", [\n\t\t\"ls-remote\",\n\t\t\"--refs\",\n\t\t\"--tags\",\n\t\trepoUrl,\n\t]);\n\treturn stdout\n\t\t.trim()\n\t\t.split(\"\\n\")\n\t\t.map((rawTag) => rawTag.split(\"refs/tags/\").at(-1))\n\t\t.filter((t) => typeof t === \"string\");\n}\n", "import fs from \"node:fs\";\nimport os from \"node:os\";\nimport path from \"node:path\";\n\nimport chalk from \"chalk\";\nimport spawn from \"nano-spawn\";\n\nimport { isBundleFolder } from \"./util.js\";\n\n/**\n * Installs npm dependencies for the NodeCG bundle present at the given path.\n * @param bundlePath - The path of the NodeCG bundle to install dependencies for.\n * @param installDev - Whether to install devDependencies.\n */\nexport async function installBundleDeps(\n\tbundlePath: string,\n\tinstallDev = false,\n) {\n\tif (!isBundleFolder(bundlePath)) {\n\t\tconsole.error(\n\t\t\t`${chalk.red(\"Error:\")} There doesn't seem to be a valid NodeCG bundle in this folder:\\n\\t${chalk.magenta(bundlePath)}`,\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tconst cachedCwd = process.cwd();\n\tif (fs.existsSync(path.join(bundlePath, \"package.json\"))) {\n\t\ttry {\n\t\t\tprocess.chdir(bundlePath);\n\t\t\tif (fs.existsSync(path.join(bundlePath, \"yarn.lock\"))) {\n\t\t\t\tprocess.stdout.write(\n\t\t\t\t\t`Installling npm dependencies with yarn (dev: ${installDev})... `,\n\t\t\t\t);\n\t\t\t\tawait spawn(\"yarn\", installDev ? [] : [\"--production\"], {\n\t\t\t\t\tcwd: bundlePath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tprocess.stdout.write(\n\t\t\t\t\t`Installing npm dependencies (dev: ${installDev})... `,\n\t\t\t\t);\n\t\t\t\tawait spawn(\n\t\t\t\t\t\"npm\",\n\t\t\t\t\tinstallDev ? [\"install\"] : [\"install\", \"--production\"],\n\t\t\t\t\t{ cwd: bundlePath },\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t\t} catch (e: any) {\n\t\t\t/* istanbul ignore next */\n\t\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t\t/* istanbul ignore next */\n\t\t\tconsole.error(e.stack);\n\t\t\t/* istanbul ignore next */\n\t\t\treturn;\n\t\t}\n\n\t\tprocess.chdir(cachedCwd);\n\t}\n}\n", "import fs from \"node:fs\";\nimport path from \"node:path\";\n\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { compileFromFile } from \"json-schema-to-typescript\";\n\nexport function schemaTypesCommand(program: Command) {\n\tprogram\n\t\t.command(\"schema-types [dir]\")\n\t\t.option(\n\t\t\t\"-o, --out-dir [path]\",\n\t\t\t\"Where to put the generated d.ts files\",\n\t\t\t\"src/types/schemas\",\n\t\t)\n\t\t.option(\n\t\t\t\"--no-config-schema\",\n\t\t\t\"Don't generate a typedef from configschema.json\",\n\t\t)\n\t\t.description(\n\t\t\t\"Generate d.ts TypeScript typedef files from Replicant schemas and configschema.json (if present)\",\n\t\t)\n\t\t.action(action);\n}\n\nfunction action(inDir: string, cmd: { outDir: string; configSchema: boolean }) {\n\tconst processCwd = process.cwd();\n\tconst schemasDir = path.resolve(processCwd, inDir || \"schemas\");\n\tif (!fs.existsSync(schemasDir)) {\n\t\tconsole.error(`${chalk.red(\"Error:\")} Input directory does not exist`);\n\t\treturn;\n\t}\n\n\tconst outDir = path.resolve(processCwd, cmd.outDir);\n\tif (!fs.existsSync(outDir)) {\n\t\tfs.mkdirSync(outDir, { recursive: true });\n\t}\n\n\tconst configSchemaPath = path.join(processCwd, \"configschema.json\");\n\tconst schemas = fs.readdirSync(schemasDir).filter((f) => f.endsWith(\".json\"));\n\n\tconst style = {\n\t\tsingleQuote: true,\n\t\tuseTabs: true,\n\t};\n\n\tconst compilePromises: Promise<void>[] = [];\n\tconst compile = (input: string, output: string, cwd = processCwd) => {\n\t\tconst promise = compileFromFile(input, {\n\t\t\tcwd,\n\t\t\tdeclareExternallyReferenced: true,\n\t\t\tenableConstEnums: true,\n\t\t\tstyle,\n\t\t})\n\t\t\t.then((ts) =>\n\t\t\t\tfs.promises.writeFile(output, \"/* prettier-ignore */\\n\" + ts),\n\t\t\t)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(output);\n\t\t\t})\n\t\t\t.catch((err: unknown) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t\tcompilePromises.push(promise);\n\t};\n\n\tif (fs.existsSync(configSchemaPath) && cmd.configSchema) {\n\t\tcompile(configSchemaPath, path.resolve(outDir, \"configschema.d.ts\"));\n\t}\n\n\tfor (const schema of schemas) {\n\t\tcompile(\n\t\t\tpath.resolve(schemasDir, schema),\n\t\t\tpath.resolve(outDir, schema.replace(/\\.json$/i, \".d.ts\")),\n\t\t\tschemasDir,\n\t\t);\n\t}\n\n\treturn Promise.all(compilePromises).then(() => {\n\t\t(process.emit as any)(\"schema-types-done\");\n\t});\n}\n", "import fs from \"node:fs\";\nimport os from \"node:os\";\nimport stream from \"node:stream/promises\";\n\nimport { confirm } from \"@inquirer/prompts\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport spawn from \"nano-spawn\";\nimport semver from \"semver\";\nimport * as tar from \"tar\";\n\nimport { listNpmVersions } from \"../lib/list-npm-versions.js\";\nimport type { NpmRelease } from \"../lib/sample/npm-release.js\";\nimport { getCurrentNodeCGVersion, pathContainsNodeCG } from \"../lib/util.js\";\n\nexport function setupCommand(program: Command) {\n\tprogram\n\t\t.command(\"setup [version]\")\n\t\t.option(\"-u, --update\", \"Update the local NodeCG installation\")\n\t\t.option(\"-k, --skip-dependencies\", \"Skip installing npm dependencies\")\n\t\t.description(\"Install a new NodeCG instance\")\n\t\t.action(decideActionVersion);\n}\n\nasync function decideActionVersion(\n\tversion: string,\n\toptions: { update: boolean; skipDependencies: boolean },\n) {\n\t// If NodeCG is already installed but the `-u` flag was not supplied, display an error and return.\n\tlet isUpdate = false;\n\n\t// If NodeCG exists in the cwd, but the `-u` flag was not supplied, display an error and return.\n\t// If it was supplied, fetch the latest tags and set the `isUpdate` flag to true for later use.\n\t// Else, if this is a clean, empty directory, then we need to clone a fresh copy of NodeCG into the cwd.\n\tif (pathContainsNodeCG(process.cwd())) {\n\t\tif (!options.update) {\n\t\t\tconsole.error(\"NodeCG is already installed in this directory.\");\n\t\t\tconsole.error(\n\t\t\t\t`Use ${chalk.cyan(\"nodecg setup [version] -u\")} if you want update your existing install.`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tisUpdate = true;\n\t}\n\n\tif (version) {\n\t\tprocess.stdout.write(\n\t\t\t`Finding latest release that satisfies semver range ${chalk.magenta(version)}... `,\n\t\t);\n\t} else if (isUpdate) {\n\t\tprocess.stdout.write(\"Checking against local install for updates... \");\n\t} else {\n\t\tprocess.stdout.write(\"Finding latest release... \");\n\t}\n\n\tlet tags;\n\ttry {\n\t\ttags = await listNpmVersions(\"nodecg\");\n\t} catch (error) {\n\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\tconsole.error(error instanceof Error ? error.message : error);\n\t\treturn;\n\t}\n\n\tlet target: string;\n\n\t// If a version (or semver range) was supplied, find the latest release that satisfies the range.\n\t// Else, make the target the newest version.\n\tif (version) {\n\t\tconst maxSatisfying = semver.maxSatisfying(tags, version);\n\t\tif (!maxSatisfying) {\n\t\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t\tconsole.error(\n\t\t\t\t`No releases match the supplied semver range (${chalk.magenta(version)})`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\ttarget = maxSatisfying;\n\t} else {\n\t\ttarget = semver.maxSatisfying(tags, \"\") ?? \"\";\n\t}\n\n\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\n\tlet current: string | undefined;\n\tlet downgrade = false;\n\n\tif (isUpdate) {\n\t\tcurrent = getCurrentNodeCGVersion();\n\n\t\tif (semver.eq(target, current)) {\n\t\t\tconsole.log(\n\t\t\t\t`The target version (${chalk.magenta(target)}) is equal to the current version (${chalk.magenta(current)}). No action will be taken.`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (semver.lt(target, current)) {\n\t\t\tconsole.log(\n\t\t\t\t`${chalk.red(\"WARNING:\")} The target version (${chalk.magenta(target)}) is older than the current version (${chalk.magenta(current)})`,\n\t\t\t);\n\n\t\t\tconst answer = await confirm({\n\t\t\t\tmessage: \"Are you sure you wish to continue?\",\n\t\t\t});\n\n\t\t\tif (!answer) {\n\t\t\t\tconsole.log(\"Setup cancelled.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdowngrade = true;\n\t\t}\n\t}\n\n\tif (semver.lt(target, \"v2.0.0\")) {\n\t\tconsole.error(\"CLI does not support NodeCG versions older than v2.0.0.\");\n\t\treturn;\n\t}\n\n\tawait installNodecg(current, target, isUpdate);\n\n\t// Install NodeCG's dependencies\n\t// This operation takes a very long time, so we don't test it.\n\tif (!options.skipDependencies) {\n\t\tawait installDependencies();\n\t}\n\n\tif (isUpdate) {\n\t\tconst verb = downgrade ? \"downgraded\" : \"upgraded\";\n\t\tconsole.log(`NodeCG ${verb} to ${chalk.magenta(target)}`);\n\t} else {\n\t\tconsole.log(`NodeCG (${target}) installed to ${process.cwd()}`);\n\t}\n}\n\nasync function installNodecg(\n\tcurrent: string | undefined,\n\ttarget: string,\n\tisUpdate: boolean,\n) {\n\tif (isUpdate) {\n\t\tconst deletingDirectories = [\".git\", \"build\", \"scripts\", \"schemas\"];\n\t\tawait Promise.all(\n\t\t\tdeletingDirectories.map((dir) =>\n\t\t\t\tfs.promises.rm(dir, { recursive: true, force: true }),\n\t\t\t),\n\t\t);\n\t}\n\n\tprocess.stdout.write(`Downloading ${target} from npm... `);\n\n\tconst targetVersion = semver.coerce(target)?.version;\n\tif (!targetVersion) {\n\t\tthrow new Error(`Failed to determine target NodeCG version`);\n\t}\n\tconst releaseResponse = await fetch(\n\t\t`http://registry.npmjs.org/nodecg/${targetVersion}`,\n\t);\n\tif (!releaseResponse.ok) {\n\t\tthrow new Error(\n\t\t\t`Failed to fetch NodeCG release information from npm, status code ${releaseResponse.status}`,\n\t\t);\n\t}\n\tconst release = (await releaseResponse.json()) as NpmRelease;\n\n\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\n\tif (current) {\n\t\tconst verb = semver.lt(target, current) ? \"Downgrading\" : \"Upgrading\";\n\t\tprocess.stdout.write(\n\t\t\t`${verb} from ${chalk.magenta(current)} to ${chalk.magenta(target)}... `,\n\t\t);\n\t}\n\n\tconst tarballResponse = await fetch(release.dist.tarball);\n\tif (!tarballResponse.ok || !tarballResponse.body) {\n\t\tthrow new Error(\n\t\t\t`Failed to fetch release tarball from ${release.dist.tarball}, status code ${tarballResponse.status}`,\n\t\t);\n\t}\n\tawait stream.pipeline(tarballResponse.body, tar.x({ strip: 1 }));\n}\n\nasync function installDependencies() {\n\ttry {\n\t\tprocess.stdout.write(\"Installing production npm dependencies... \");\n\t\tawait spawn(\"npm\", [\"install\", \"--production\"]);\n\n\t\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n\t} catch (e: any) {\n\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\tconsole.error(e.stack);\n\t\treturn;\n\t}\n}\n", "export async function listNpmVersions(packageName: string) {\n\tconst res = await fetch(`https://registry.npmjs.org/${packageName}`);\n\tif (!res.ok) {\n\t\tthrow new Error(`Failed to fetch versions for ${packageName}`);\n\t}\n\tconst data = (await res.json()) as { versions: Record<string, unknown> };\n\treturn Object.keys(data.versions);\n}\n", "import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { pathToFileURL } from \"node:url\";\n\nimport { Command } from \"commander\";\n\nimport { pathContainsNodeCG } from \"../lib/util.js\";\n\nexport function startCommand(program: Command) {\n\tprogram\n\t\t.command(\"start\")\n\t\t.option(\"-d, --disable-source-maps\", \"Disable source map support\")\n\t\t.description(\"Start NodeCG\")\n\t\t.action(async () => {\n\t\t\tconst projectDir = recursivelyFindProject(process.cwd());\n\n\t\t\t// Check if nodecg is already installed\n\t\t\tif (pathContainsNodeCG(projectDir)) {\n\t\t\t\tawait import(pathToFileURL(path.join(projectDir, \"index.js\")).href);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if NodeCG is installed as a dependency\n\t\t\tconst nodecgDependencyPath = path.join(projectDir, \"node_modules/nodecg\");\n\t\t\tif (pathContainsNodeCG(nodecgDependencyPath)) {\n\t\t\t\tawait import(\n\t\t\t\t\tpathToFileURL(path.join(nodecgDependencyPath, \"index.js\")).href\n\t\t\t\t);\n\t\t\t}\n\t\t});\n}\n\nfunction recursivelyFindProject(startDir: string) {\n\tif (!path.isAbsolute(startDir)) {\n\t\tthrow new Error(\"startDir must be an absolute path\");\n\t}\n\tconst packageJsonDir = path.join(startDir, \"package.json\");\n\tif (fs.existsSync(packageJsonDir)) {\n\t\treturn startDir;\n\t}\n\tconst parentDir = path.dirname(startDir);\n\tif (parentDir === startDir) {\n\t\tthrow new Error(\"Could not find a project directory\");\n\t}\n\treturn recursivelyFindProject(parentDir);\n}\n", "import fs from \"node:fs\";\nimport os from \"node:os\";\nimport path from \"node:path\";\n\nimport { confirm } from \"@inquirer/prompts\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\n\nimport { getNodeCGPath } from \"../lib/util.js\";\n\nexport function uninstallCommand(program: Command) {\n\tprogram\n\t\t.command(\"uninstall <bundle>\")\n\t\t.description(\"Uninstalls a bundle.\")\n\t\t.option(\"-f, --force\", \"ignore warnings\")\n\t\t.action(action);\n}\n\nfunction action(bundleName: string, options: { force: boolean }) {\n\tconst nodecgPath = getNodeCGPath();\n\tconst bundlePath = path.join(nodecgPath, \"bundles/\", bundleName);\n\n\tif (!fs.existsSync(bundlePath)) {\n\t\tconsole.error(\n\t\t\t`Cannot uninstall ${chalk.magenta(bundleName)}: bundle is not installed.`,\n\t\t);\n\t\treturn;\n\t}\n\n\t/* istanbul ignore if: deleteBundle() is tested in the else path */\n\tif (options.force) {\n\t\tdeleteBundle(bundleName, bundlePath);\n\t} else {\n\t\tvoid confirm({\n\t\t\tmessage: `Are you sure you wish to uninstall ${chalk.magenta(bundleName)}?`,\n\t\t}).then((answer) => {\n\t\t\tif (answer) {\n\t\t\t\tdeleteBundle(bundleName, bundlePath);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction deleteBundle(name: string, path: string) {\n\tif (!fs.existsSync(path)) {\n\t\tconsole.log(\"Nothing to uninstall.\");\n\t\treturn;\n\t}\n\n\tprocess.stdout.write(`Uninstalling ${chalk.magenta(name)}... `);\n\ttry {\n\t\tfs.rmSync(path, { recursive: true, force: true });\n\t} catch (e: any) {\n\t\t/* istanbul ignore next */\n\t\tprocess.stdout.write(chalk.red(\"failed!\") + os.EOL);\n\t\t/* istanbul ignore next */\n\t\tconsole.error(e.stack);\n\t\t/* istanbul ignore next */\n\t\treturn;\n\t}\n\n\tprocess.stdout.write(chalk.green(\"done!\") + os.EOL);\n}\n", "import type { Command } from \"commander\";\n\nimport { defaultconfigCommand } from \"./defaultconfig.js\";\nimport { installCommand } from \"./install.js\";\nimport { schemaTypesCommand } from \"./schema-types.js\";\nimport { setupCommand } from \"./setup.js\";\nimport { startCommand } from \"./start.js\";\nimport { uninstallCommand } from \"./uninstall.js\";\n\nexport function setupCommands(program: Command) {\n\tdefaultconfigCommand(program);\n\tinstallCommand(program);\n\tschemaTypesCommand(program);\n\tsetupCommand(program);\n\tstartCommand(program);\n\tuninstallCommand(program);\n}\n"],
  "mappings": "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",
  "names": ["chalk", "spawn", "Command", "fs", "path", "path", "fs", "fs", "os", "path", "chalk", "spawn", "fs", "path", "chalk", "spawn", "chalk", "fs", "path", "spawn", "action", "path", "fs", "chalk", "os", "spawn", "fs", "path", "chalk", "action", "fs", "os", "chalk", "spawn", "semver", "chalk", "os", "semver", "fs", "spawn", "fs", "path", "path", "fs", "fs", "os", "path", "confirm", "chalk", "action", "path", "fs", "chalk", "confirm", "os", "Command", "spawn", "chalk"]
}
